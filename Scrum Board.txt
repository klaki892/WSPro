Board for WSPro
--------------------------

To-Do:
    - Create common scripts for fast effect application to cards.
    - Create the functions to interact with the specific fields
    - Create utility functions that do more complex actions from core functions
        - Draw a card, shuffle the deck,
    - Create the Core functions to do simple abstract action in the game for scripters
        - moving a card from zone to zone, get a certain field on a player side, etc.

    - Code the Abilities & effects scripting system
        - effect_applied & effect_stopped triggers (see communicationbreakdown)
        - continuous and activatd ability examples
        - test making abilities from Utility/abilityTemplate lua library
        - Create a mapping from Triggers to TriggerSubscriber<TriggerName> & Create a reflection invoker for scripting
        -Look into: can we make an annotation on classes and methods that need to be exposed to scripting so they are automatically exposed? (potentially using eventhub? our annotation listens for a scriptengine to be emitted and then registers itself and its name)
    - Code Player Choices & Controllers W/ Testing endpoints ( See WsPoCommunicationBreakdown.txt)
        - Code External Communication for input
            - create visibility filter for sending out info to players
            - Revamp Grpc communication of events to fix bugs
                - Change message polling queue into lookup for next known message in log (to prevent current connected clients from skipping/missing messages)
                    - Add a message identifier (or #) to each message sent to player
                    
            - make player choice timeouts configurable (currnetly 2mins)
            - Create a GUI to play the game.
                - Display Game Board
                    - Cascading Zones for cards that need to be stacked (stock, clock, hand, level))
                - Code Gameplay animations / display
                    - Move Card
                        - add orentiation change during movement
                    - Orient Card (stand, rest, reverse)
                    - Card Stats During Play Choices ( level, power, soul)
                    - Create ChoiceSelector (container that has buttons to do things)
                        - Handle Play Choice For Action, String, Ability
                    - Create Window for  for displaying multiple cards in multiple locations at once (e.g. displaying deck)
                    - Create Global Pointer for displaying play actions for selected card
                        - Handle Playchoice Card Choice

                - Display Magnified Card & Card Description to side of stage
                - Integrate with network
                    - Provide errors on disconnect
    - Create a GUI flow to create a game
        - Allow player to choose their name
        - Allow players to select their deck ( at least 1 of the following)
            - via a link of their EncoreDeck (using EncoreDeck API)
            -
        - Look into: let player choose how to get images (at least 1 of the following)
            - Obtain images from a user-specified URL providing images for cards based on ID
            - Let player load a DB containing images
            - use TTS WSMTools deck image link for own cards, use WebRTC for pulling opponent deck cards as needed
                - (* deck images are sorted alphabetically by ID)
        - Allow player to lobby together for game creation
            - Allow player to choose server IP/port to connect to game (and/or) lobby servers
            - Allow player to ready-up & start game when all players are ready (lobby system?)

    - create a global CardAttribute map so when read in from a source we get both languages version external resource file?

Last known In-Progress (Before suspension):

    - Code Player Choices & Controllers W/ Testing endpoints ( See WsPoCommunicationBreakdown.txt)
        - Code External Communication for input
            - Revamp Grpc communication of events to fix bugs
                - Change message polling queue into lookup for next known message in log (to prevent current connected clients from skipping/missing messages)

            - Create a GUI to play the game.
                - Display Game Board
                - Code Gameplay animations / display

Done:
    - webui: the logic to go from Point A to B
    - webui: receive past events if joined in progress
    - create zones ( as basic rectangle)
    - Flip Card Animation
    - find a way to parse game triggers into grpc readable messages
    - Check that grpc clients dont timeout waiting for game events
    - Code grpc basic controller
    - code system for retrieving card information
    - Code basic server interactions and proof of concept external communication
    - Code Combat
    - Proof of concept the ability template system
    - Code Player Choices
    - Code GamePhases
    - Code abilities & effects implementation
    - code how cost is checked and played (see CostImpl.txt)
    - Code all basic commands needed for game completion, assuming no player input and default choices for simple choices.
    - handle game over
    - code Levelup Interrupt rule
    - Code Interrupt Rule Action System
    - Coded CheckTiming
    - Code Trigger Handling System
        - Refactor eventListerners to Guava EventHub
    - refactor Game Phase handling (see PhaseHandlingComparison.txt & core Major Components impl.docx))
    - Refactor Zones and cards (see CardBreakdown & ZoneBreakdown)
    - Define Zones (see ZoneBreakdown.txt)
    - determine how player choices & input is handled at th command level. (see wspro command definitions.txt & WsPoCommunicationBreakdown.txt)
    - Define how (if possible) the state of the game can be preserved (see GameStateSavingBreakdown & Replay System Thoughts)
    - Define the ability template system for scripting. (see AbiltiiesEffectSCriptingBreakdown.txt)
    - Define Cards. Playing cards, Papercards, and how abilities attach to cards. (See CardBreakdown.txt)
    - Define what a card Ability is, and what effects are a result of abilities
    - Define what a card effect is and the different types of effects
    - sudocode out abilities & effects implementation
    - define abilities & effects implementation, may need a step-by-step example of entire system.
        - Determine how Abilities maintain memory (Ex: swimsuit Sugaha)
        - Define Act Abilities implementation. (see AbilitiesAndEffectsImpl.txt)
    - define how cost is checked and played (see CostImpl.txt)
    - read all rules about abilities & effects
    - Define all basic commands needed for game completion, assuming no player input and default choices for simple choices.
    - Detail STEP-BY-STEP how triggers occur (ex: triggering a level up or reshuffle) (see Trigger System Thoughts.txt)
    - Design how Interrupt Type rule actions affect the overall system, and how to evade their interruptions
        [see InterruptTypeRuleActionThoughts.txt]
    - Create the playing field zones
