Board for Scripting Engine
--------------------------

To-Do:
    - Create common scripts for fast effect application to cards.
    - Create the functions to interact with the specific fields
    - Create utility functions that do more complex actions from core functions
        - Draw a card, shuffle the deck,
    - Create the Core functions to do simple abstract action in the game for scripters
        - moving a card from zone to zone, get a certain field on a player side, etc.

    - Code the Abilities & effects scripting system
        - effect_applied & effect_stopped triggers (see communicationbreakdown)
        - continuous and activatd ability examples
        - test making abilities from Utility/abilityTemplate lua library
        - Create a mapping from Triggers to TriggerSubscriber<TriggerName> & Create a reflection invoker for scripting
        -Look into: can we make an annotation on classes and methods that need to be exposed to scripting so they automatically are? (potentially using eventhub? our annotation listens for a scriptengine to be emitted and then registers itself and its name)
    - Code Player Choices & Controllers W/ Testing endpoints ( See WsPoCommunicationBreakdown.txt)
        - Code External Communication for input
            - create visibility filter for sending out info to players
            - make communication timeouts configurable
            - Create a GUI to play the game.
                - Display Game Board
                    - Cascading Zones for cards that need to be stacked
                - Move Card
                    - the logic to go from Point A to B
                - Create ChoiceSelector (container that has buttons to do things)
                - Integrate with network


    -refactor gameContext into Game
    - create a global CardAttribute map so when read in from a source we get both languages version external resource file?
In-Progress:
    - Code Player Choices & Controllers W/ Testing endpoints ( See WsPoCommunicationBreakdown.txt)
        - Code External Communication for input
            - Create a GUI to play the game.
                - Display Game Board
                - Integrate with network

            - Move Card
                - the logic to go from Point A to B
        - Connect to IP for server

    - Code the Abilities & effects scripting system

Done:
    - create zones ( as basic rectangle)
    - Flip Card Animation
    - find a way to parse game triggers into grpc readable messages
    - Check that grpc clients dont timeout waiting for game events
    - Code grpc basic controller
    - code system for retrieving card information
    - Code basic server interactions and proof of concept external communication
    - Code Combat
    - Proof of concept the ability template system
    - Code Player Choices
    - Code GamePhases
    - Code abilities & effects implementation
    - code how cost is checked and played (see CostImpl.txt)
    - Code all basic commands needed for game completion, assuming no player input and default choices for simple choices.
    - handle game over
    - code Levelup Interrupt rule
    - Code Interrupt Rule Action System
    - Coded CheckTiming
    - Code Trigger Handling System
        - Refactor eventListerners to Guava EventHub
    - refactor Game Phase handling (see PhaseHandlingComparison.txt & core Major Components impl.docx))
    - Refactor Zones and cards (see CardBreakdown & ZoneBreakdown)
    - Define Zones (see ZoneBreakdown.txt)
    - determine how player choices & input is handled at th command level. (see wspro command definitions.txt & WsPoCommunicationBreakdown.txt)
    - Define how (if possible) the state of the game can be preserved (see GameStateSavingBreakdown & Replay System Thoughts)
    - Define the ability template system for scripting. (see AbiltiiesEffectSCriptingBreakdown.txt)
    - Define Cards. Playing cards, Papercards, and how abilities attach to cards. (See CardBreakdown.txt)
    - Define what a card Ability is, and what effects are a result of abilities
    - Define what a card effect is and the different types of effects
    - sudocode out abilities & effects implementation
    - define abilities & effects implementation, may need a step-by-step example of entire system.
        - Determine how Abilities maintain memory (Ex: swimsuit Sugaha)
        - Define Act Abilities implementation. (see AbilitiesAndEffectsImpl.txt)
    - define how cost is checked and played (see CostImpl.txt)
    - read all rules about abilities & effects
    - Define all basic commands needed for game completion, assuming no player input and default choices for simple choices.
    - Detail STEP-BY-STEP how triggers occur (ex: triggering a level up or reshuffle) (see Trigger System Thoughts.txt)
    - Design how Interrupt Type rule actions affect the overall system, and how to evade their interruptions
        [see InterruptTypeRuleActionThoughts.txt]
    - Create the playing field zones
