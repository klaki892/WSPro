How do we make a game?
	- need Players
	- 	need their decks in papercard format
			- need to convert thier format to papercard
		- need a way to communicate the game with them
			- (see wsprocommunication)
			- pass game events to them 
			- pass and receive playChoice input from them
	- need a way to find cards
	- need a way to find abilities
What do we need to lookup a card?
	- just the ID?
	- a database based id? 
what do we need to lookup abilities?
	- just a card ID?
		- card ID's arent valid filenames
	- a database specific ID tying it to a card?
	
How do we store cards?
	- database 
		Pros:
			- centralized dynamic lookup
		Cons:
		Neutral
			- whats the update process for a card's stats?
		
How do we store ability scripts?
	- database
		Pros:
			+ centralized location
			+ no worries about invalid filenames
		Cons:
			-
		Neutral:
			- whats the update process for an ability?
			
What is the process flow from server start to Game Start
	1. Check Configuration
		a. Test connection to CardFinder and AbilityFinder
		b. Start up other services depending on arguments (e.g. kubernetes = health check)
	2. Start server listening for connections
	3. First connection should give us game configuration details
		a. give us name of players & their deck lists
		b. use configuation to source cards & abilities
		c. Pull from sources all cards & abilities and setup game 
		d. return confirmation of game setup with any warnings or errros(missing cards) 
	4. Await for connections from players (or timeout?)
	5. When player connected
		a. determine identity of player
		b. hook connection into respective controller for game
	6. when both players connected
		a. obtain ready-up flag from each
	7. Start game, await game over.
	8. When game is over
		a. save/log game stats? (and other hooks)
		b. close all connections
	9. end program or stay alive for more games

What are the game configuration details? (Step 3 above)
	receives "setupGame" call
		player x2
			List of cards
			Player ID or other unique ID token
	returns:
		setupDetails
			list of cards with no scripts
			list of unknown cards
			boolean - is game ready for connections?

How do we connect players to a ready game?
    1. Once game is made await player connections
    2. upon player connection check ID against waiting games
        (or, on game creation make GUID's that the player must know)
    3. if game exists, set connector to player, else error out player
    4. player should start listening for game events / send ready-up

How do we turn requests for the player over to them?
    Possbility #1: Encapsulate all events and put in a queue
        - game event List /output stream
            - Any triggers made are placed into this List
            - The list maintains all game events received
                - allows for pulling events at a later time
            - all events are also put into a queue
                - the stream pulls these events as they happen
        - player choice queue
            - Requests are wrapped in a Completable future
                - they are given an ID for uniqueness
                - the completable future goes into the output stream
                - the method is then blocked waiting for a response
                    - the wait is blocked for X amount of time before a default AI will make the choice.
                    - reminder stream messages should be sent to warn the player of remaining time.
            - any pending choices are placed into a queue
            - when a choice response is recieved, it checks the queue
                - after matching ID's, the response is paired to the choice
                - the future is completed with the response, and request removed from queue
        Pros:
            + correctly handles events
            + if two players disconnect, game is guaranteed to finish eventually
        Cons:
            - Concede/ INterrupt events are undefiend.
        Neutral:
            - if both players disconnect, whats the procedure? (double loss?)
