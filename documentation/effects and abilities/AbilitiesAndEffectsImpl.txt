
how can we tell if a cost can 100% be paid or not before it's actually paid?
	See CostImpl.txt, need a system that checks if the game wont fail to 100% execute the cost steps.
WHen do we apply continious effects?
	- After Actions
	- After PHASE_START Trigger
	- Potentially after all triggers...
	- first step of application is to reset all cards stats. (but not states)
	When do we re-apply continious effects?
	- see above 

how do you check and apply "this can stand during stand phase"
	- Flags on the playing card. (e.g. CAN_STAND) The continious effect system handles how this will be set by evaluation time (including multiple effects that change the flag) 

What is an ability?
	A information container which holds:
		How this ability can be used (Cont, Auto, Act)
		What (if any) cost is required 
		Who Owns the ability (Card, effect of a card)
		When this ability can be used (Trigger conditional)
What is a cost?
	Atomic action(s) that must be performed, and cant be interrupted.
		Requires a choice? 
			1 or more options must be possible to proceed. 
	If all are performed fully, cost is considered paid. else unpaid.
	
What is an effect?
	Holds:
		action(s) to perform. / states to change
			Could require choices
		Where the effect came from (ability)
		Who owns the effect (master of ability)
	
		
	Action(s) that cause state changes, may be based on conditionals.
	One-Shot effect
		action(s) in the game that may create triggers and cause state changes
	Continious Effect
		actions that apply to specific game entities and continue to apply until a condition is met. 
		Who holds the state change?
		Who triggers the end of a continious effect?
		When are these effects updated?
	Replacement Effect
		Actions that intercept original game programming for a new option (or choice)
		
		
Case Study: Automatic ability - Encore (One Shot effect)
	Possibility #1:
		1. CharacterA PaperCard registers Trigger Listener at start of game:
			On CARD_MOVE
				if CARD_MOVE.card's papercard is this papercard,
				source was STAGEZONE,
				Destination is WAITINGROOMZONE:
				Register in CheckTiming  The following Ability:
					Cost:
						Repeat 3 Times:
							1. Get card on top of stock
							2. MOVE card from STOCK -> WAITING ROOM
					Validity:
						CARD_MOVE's Destination Card is in WAITINGROOM
					Effect:
						Check If cost can be paid
						Confirm Player wants to use ability.
						Pay Cost
						MOVE CARD_MOVE's Destination Card from WAITING_ROOM -> CARD_MOVE's Source Zone
						Get Destination Zone
						REST card in Destination Zone
						emit Event CARD_ENCORE
		2. CharacterA Instance is reversed in battle
		3. Encore Step happens
		4. MOVE CharacterA Instance occurs
		5. meets conditions of CharacterA PaperCard's Listener
		6. Effect Plays out (assume valid and cost can be paid)
		
			Pros:
				+ One Listener for all multiples of Instanced Playing Cards
				+ 
			Cons:
				-
			Neutral:

Case Study: Continious Ability - During your opponent's turn, all of your other 《A》 or 《B》 characters get +1000 power.(Continious Effect)
	Possibility #1: Continious Timing after every action (after interrupt timing)
		1. CharacterA PaperCard Registers Effect at start of Game:
			Conditions:
				If Current Turn's master is not the master of this card,
				This card exists on STAGE_ZONE
				
				
	Possibility #2: Trigger system into registering continious effects for continious timing. Continious timings happen after actions, and when PHASE_START is triggered 
		1. CharacterA PaperCard Registers Trigger Listener at start of game:
			On CARD_PLAYED
				if CARD_PLAYED.Card's papercard is this papercard
					Register the following Effect: 
						Condition: 
							If Current Turn's master is not the master of CARD_PLAYED's play card,
							CARD_PLAYED playing card exists on STAGE_ZONE:
						Actions:
							1. Get all cards on master's stage
							2. for each playing card
								2a. If NOT CARD_PLAYED playing card
								2b.Get Traits of card
								2c. If Card Trait's Contain <A> or <B>
								2d. Add +1000 to power stat.
						UnRegister: (if continious condition fails)
							CARD_PLAYED playing card does NOT exist on STAGE_ZONE
						Flags:
							DEPENDENT: TRUE (needs traits being present)
							ZONE effect: FALSE
							CHANGES_STATE: TRUE (modifies power)
		2. CharacterB is on stage with Trait <A>
		3. CharacterC currently has an active effect to modify +500 power to All characters (DEPENDENT FALSE, ZONE FALSE, CHANGES_STATE TRUE)
		3. CARD_PLAYED CharacterA is emitted
			3a. CharacterA's effect is registered for continious timings.
		4. interrupt Check
		5. Continious Check:
			5a. For all Registered effects sort in this order:
				5a1. Effects with ZONE Flag set to true
				5a2. Effects with CHANGES_STATE set to false
				5a3. effects with DEPENDENT set to false
					5a3a. sub-Sort in Fundamental Order
				5a4. Effects with DEPENDENT st to true
					5a4a. Sub-sort in Fundamental Order
			5b. For all playing cards in the game, reset to papercard stats. 
			5c. Execute Effects in order
				5c1. CharacterC's effect happens. Adding 500 power to CharacterB & CharacterA
				5c2. CharacterA's effect Triggers. 
					5c2a. Condition is not met (not opponents turn)
					5c2b. Effect checks if should be unregistered
						5c2b1. It should not be unregistered (source is still on stage)
				5c3. End Result: CharacterB has +500, CharacterA has +500
		6. Game Continues as normal.
		7. PHASE_START is emitted for stand phase of opponents turn 
			7a. Continious Check:
				7a1. For all playing cards in the game, reset to papercard stats. 
				7a2. Execute Effects in order
					7a2a. CharacterC's effect happens. Adding 500 power to CharacterB & CharacterA
					7a2b. CharacterA's effect Triggers. 
						7a2b1. All Conditions are met. CharacterB Adds +1000 power.
				7a3. End Results: CharacterB has +1500, CharacterA +500
		Pros:
			+ Effects Application is independent of card state
		
		Cons
			- when to do continious checks is not clear. 
			- Somehow need to return emitted event properties from to the action callers parents (CARD_PLAYED needs info from MoveCard immediately)
		Additional Example: Character moving stage positions exception: 2 continious effects, one from a continious ability & one from an Act ability
			1.CharacterA exists on STAGE in MIDDLE stage position
			2. CharacterB Exists on LEFT BACK STAGE, with an active effect to give +500 to the cards in front of it.
			3. CharacterC exists on Stage with the ACT Ability: "choose a character, it gets 1000+ til end of turn"
			4. Main Phase is occuring.
				4a. CharacterA currently has +500 buff from CharacterB's continious effect
			5. Player chooses to activate CharacterC's Ability
				5a. The Ability Registers the continious Effect:
					Variables from ability calling:
						VAR1. CharacterA Playing Card
						VAR2. [Current Turn Number]
					Condition:
						If Current Turn is VAR2,
						VAR1 is on STAGE 
					Actions:
						2. Add 1000 to power stat of VAR1 
					UnRegister:
						True/Always (if condition fails, this effect ceases)
					Flags:
						DEPENDENT: FALSE
						ZONE effect: FALSE
						CHANGES_STATE: TRUE (modifies power)
			6. ACT_ABILITY event occurs
			7. Interrupt Timing
			8. Continious Timing (*all cards are reset to base stats)
				8a. CharacterC's Ability's effect is activated.
					8a1. CharacterA +1000 power
				8b.CharacterB's effect is activated
					8b1. CharacterA +500 Power
			9. CharacterA has +1500 power
			10. CARD_MOVE 
				10a. CharacterA is being moved to RIGHT STAGE POSITION
					10a1. A new Card is not made since this is a stage position move. Destination Card & Source Card Reference the same playing card. 
			11. Interrupt Timing
			12. Continious Timing (*all cards are reset to base stats)
				12a. CharacterC's Ability's Effect is activated
					8a1. CharacterA's playing card refernce still exists and is on stage. Conditions met
					8a2. CharacterA +1000 Power
				12b. CharacterB's Ability is activated
					12b1. CharacterB does not have any cards in front of it. Conditions met. But doesnt apply to any cards.
			13. CharacterA has +1000 Power.
			14. Game Continues. 
					
				
			
Case Study: Continious Ability - "If this card would attack, you may instead choose a character on your opponent's back stage, and have this card frontal attack with the chosen character as the defending character" (Replacement Effect)
	Possibility #1: ATTACKER_CHOSEN event intercepts attack declaration step.
		1. CharacterA registers the effect:
			Variables
			Condition:
				Attacking Card has the papercard of this effect's master.
			Action:
				1. Confirm would like to perform effect
				2. Player Choice - Back Stage Character (if not possible to choose, halt)
				3. obtain current combat
				4. Set combat's Defending character to player's choice playing card
				5. Skip Normal Defending character execution 
			UnRegister:
			Flags:
				DEPENDENT: 
				ZONE Effect:
				CHANGES_STATE:
		2. Game Advances to Attack Declaration Step
			2a. PHASE_START emitted
			2b. Check Timing Occurs
			2c. PHASE_START emitted
			2d. Check timing occurs
			2e. Game Decides which character are able to perform attack
			2f. Player Choice - Choose Attacker or stop 
			2g. Player Chooses CharacterA
			2h. ATTACKER_CHOSEN emitted
		Sub-Possibility #1A: replacementTiming
			3. replacementTiming Occurs 
		Sub-Possibility #1B: Flags on characters
			3. Game checks if card has flag to choose opponent, and asks player to do so if true
			4. Game checks if defending character is forced (Great performance)5
			5. game selects defending characters
		Cons:
			- The game now is explicitly checking for known card effects (great performance and replacement of attack choice) this is a slippary slope and is not extensible.
	Possibility #2: 
		- All code executed by phase handler (and other system/game proceses) are now wrapped inside ReplaceableAction() Methods where:
			Arguments:
				Replacement Trigger Condition (i.e. ATTACKER_CHOSEN)
				Closure containing default code to do.
			- ReplaceableAction Checks if theres a queue of Replacement Effects to occur at the declaration of the specific trigger condition. If so, it does those actions. If not, it does the default code.
			- ReplaceableAction Must execute Replacement Effects according to the game rules 
		1. CharacterA Papercard registers the following Trigger Listener:
			on ATTACKER_CHOSEN
				if ATTACKER_CHOSEN.card  has this card's papercard
				Register in ReplaceableAction the following RplacementEffect:
					Condition:
						Trigger: SETUP_ATTACK
						Attacking Card has the papercard of this effect's master.
						There exists a character in opponents back stage
					Action:
						1. Confirm would like to perform effect
						2. Player Choice - Back Stage Character 
						3. obtain current combat
						4. Set combat's Attack Type to Frontal
						5. Set combat's Defending character to player's choice playing card
					UnRegister:
						True/Always (If Condition was met or not)
					Flags:
						REPLACES_ATTACK_TYPES: True (affects defending character)
						AFFECTS_ACTION: TRUE (Overrides normal attack choice)
						AFFECTS_CARD_OR_ABILITY: FALSE
		2. Game Advances to Attack Declaration Step
			2a. PHASE_START emitted
			2b. Check Timing Occurs
			2c. PHASE_START emitted
			2d. Check timing occurs
			2e. Game Decides which character are able to perform attack
			2f. Player Choice - Choose Attacker or stop 
			2g. Player Chooses CharacterA
			2h. ATTACKER_CHOSEN emitted
				CharacterA's Trigger successfully registers a ReplaceableAction
		3. ReplaceableAction(SETUP_ATTACK)
			3a. A ReplaceableAction Exists for this trigger, CharacterA's Replacement Effect is executed
		4. Attacking Character is rested
		5. Game Continues as normal. 
		Pros:
			+ Abstract enough to replace code with caring what the replaced code does.
			+ Granularity is adjustble 
			+ If changes need to be made, existing code can go into default code section. 
			+Doesnt affect game mandated trigger (yet)
		Cons:
			- Doesnt solve Effects that skips phases 
			- all default replaceable code cant return values (must be void)
			- Requires VERY STRATGIC naming of game rules and grouping them. We are likely 99% to get this wrong and have to refactor a lot if something gets more granular.
			- Unless we wrap ALL GAME CODE, we will be wrapping more code as more replacement effects get made.
			- Replacement effects may have to be broken up into multiple game rule categories so it hits everything it needs to. 
General Issue:
	- The game needs to go down choice trees to make sure the user can actually make the choice without breaking the game. 
		
			
			
 